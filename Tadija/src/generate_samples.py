from models import DCGenerator,WGenerator,W9Generator,Res34Generator,BiLSTMDCGenerator,BiLSTMGenerator
from build_dataset import build_dataset
from helper_functions import initialize,ode_loss
import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data
import numpy as np
import os
import matplotlib.pyplot as plt
import imageio

if __name__=="__main__":
	generator=WGenerator()
	chkp=torch.load('GAN\\WGAN\\6_layers\\01_L\\training_checkpoint_2000')
	generator.load_state_dict(chkp['generator_state_dict'])
	if not os.path.isdir('GAN\\WGAN\\6_layers\\01_L\\samples'):
		os.mkdir('GAN\\WGAN\\6_layers\\01_L\\samples')
	n=100
	noise=torch.Tensor(np.random.normal(0,1,(n,100)))
	with torch.no_grad():
		heartbeats=generator(noise)
	time=[i*0.6/216 for i in range(216)]
	for i in range(n):
		plt.title("Heatrbeat type: L (Left bundle branch block beat)\nGenerated by Wasserstein Generative Adversarial Network (WGAN)")
		plt.plot(time,heartbeats[i])
		plt.ylabel('mV')
		plt.xlabel('s')
		#plt.show()
		plt.savefig('GAN\\WGAN\\6_layers\\01_L\\samples\\{}'.format(i+1))
		plt.close()

	with imageio.get_writer('GAN\\WGAN\\6_layers\\01_L\\samples\\heartbeats.gif',mode='I',duration=1) as writer:
		for i in range(n):
			image=imageio.imread('GAN\\WGAN\\6_layers\\01_L\\samples\\{}.png'.format(i+1))
			writer.append_data(image)