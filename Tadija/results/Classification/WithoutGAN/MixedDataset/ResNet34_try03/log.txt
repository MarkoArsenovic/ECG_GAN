Classification

Heartbeat types: ["N","L","R","A","a","J","S","V","F","e","j","E"]

Model: ResNet34

#----------------------------------------------------------------------------------------------#

class BasicBlock(nn.Module):
	def __init__(self,in_channels,out_channels,kernel_size,stride,padding):
		super(BasicBlock,self).__init__()

		self.conv1=nn.Sequential(
			nn.Conv1d(in_channels,out_channels,kernel_size,stride,padding),
			nn.BatchNorm1d(out_channels),
			nn.ReLU(True),
		)

		self.conv2=nn.Sequential(
			nn.Conv1d(out_channels,out_channels,3,1,1),
			nn.BatchNorm1d(out_channels)
		)

		self.relu=nn.ReLU(True)

		if in_channels!=out_channels or (kernel_size,stride,padding)!=(3,1,1):
			self.shortcut=nn.Sequential(
				nn.Conv1d(in_channels,out_channels,kernel_size,stride,padding,bias=False),
				nn.BatchNorm1d(out_channels),
			)
		else:
			self.shortcut=nn.Sequential()

	def forward(self,x):
		out=self.conv1(x)
		out=self.conv2(out)
		out+=self.shortcut(x)
		out=self.relu(out)
		return out


class ResNetLayer(nn.Module):
	def __init__(self,num_blocks,in_channels,out_channels,kernel_size,stride,padding):
		super(ResNetLayer,self).__init__()
		blocks=[]
		blocks.append(BasicBlock(in_channels,out_channels,kernel_size,stride,padding))
		for i in range(num_blocks-1):
			blocks.append(BasicBlock(out_channels,out_channels,3,1,1))
		self.main=nn.Sequential(*blocks)

	def forward(self,x):
		return self.main(x)


class ResNet34(nn.Module):
	def __init__(self,num_types):
		super(ResNet34,self).__init__()
		self.main=nn.Sequential(
			nn.Conv1d(1,64,3,1,1,bias=False),
			nn.BatchNorm1d(64),
			ResNetLayer(3,64,64,4,2,1),
			ResNetLayer(4,64,128,8,4,2),
			ResNetLayer(6,128,256,8,4,2),
			ResNetLayer(3,256,512,6,1,0),
			nn.AdaptiveAvgPool1d(1),
			nn.Flatten(),
			nn.Linear(512,num_types),
		)

	def forward(self,x):
		x=x.view(-1,1,216)
		return self.main(x)

#----------------------------------------------------------------------------------------------#

Optimizer: SGD
Learning rate: 0.0002

Loss: CrossEntropyLoss

Batch size: 200
Training steps (steps of one batch): 100

Testset accuracy=0.8452605459=8516/10075
Confusion matrix:
    7389        50         1         4         0         0         0         9         0         0         0         0  
     325       474         1         3         0         0         0         3         0         0         0         2  
     341         4       372         2         0         0         0         6         0         0         0         1  
     246         1         7         1         0         0         0         0         0         0         0         0  
      15         0         0         0         0         0         0         0         0         0         0         0  
       9         0         0         0         0         0         0         0         0         0         0         0  
       1         0         0         0         0         0         0         0         0         0         0         0  
     337        54        13         5         1         0         1       280         0         0         0         0  
      66        11         0         0         0         0         0         4         0         0         0         0  
       2         0         0         0         0         0         0         0         0         0         0         0  
      23         0         0         0         0         0         0         0         0         0         0         0  
      11         0         0         0         0         0         0         0         0         0         0         0
  